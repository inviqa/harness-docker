{{- with .Values.services.elasticsearch -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-elasticsearch
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    {{- include "chart.labels" $ | nindent 4 }}
    app.kubernetes.io/component: elasticsearch
    app.service: {{ $.Release.Name }}-elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app.service: {{ $.Release.Name }}-elasticsearch
{{- if $.Values.persistence.elasticsearch.enabled }}
  strategy:
    type: Recreate
{{- end }}
  template:
    metadata:
      labels:
        {{- include "chart.selectors" $ | nindent 8 }}
        app.kubernetes.io/component: elasticsearch
        app.service: {{ $.Release.Name }}-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
      - env:
        - name: ES_JAVA_OPTS
          value: -Xmx512m -Xms512m
        - name: discovery.type
          value: single-node
        image: {{ .image | quote }}
        imagePullPolicy: Always
        name: elasticsearch
        ports:
        - containerPort: 9200
        resources:
          limits:
            memory: {{ .resources.memory }}
          requests:
            {{- with (.resources | dig "cpu" "request" nil) }}
            cpu: {{ . }}
            {{- end }}
            memory: {{ .resources.memory }}
        readinessProbe:
          tcpSocket:
            port: 9200
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
      restartPolicy: Always
      volumes:
      - name: elasticsearch-data
{{- if $.Values.persistence.elasticsearch.enabled }}
        persistentVolumeClaim:
          claimName: {{ tpl ($.Values.persistence.elasticsearch.claimName | default "") $ | default (print $.Release.Name "-elasticsearch") | quote }}
{{- else }}
        emptyDir: {}
{{- end }}
status: {}
{{- end }}
{{- end }}
