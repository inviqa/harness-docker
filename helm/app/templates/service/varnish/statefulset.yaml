{{- with .Values.services.varnish -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $.Release.Name }}-varnish
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    {{- include "chart.labels" $ | nindent 4 }}
    app.kubernetes.io/component: varnish
    app.service: {{ $.Release.Name }}-varnish
spec:
  {{- with (pick . "replicas") }}
  {{- . | toYaml | nindent 2 }}
  {{- end }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.service: {{ $.Release.Name }}-varnish
  serviceName: {{ $.Release.Name }}-varnish-headless
  template:
    metadata:
      creationTimestamp: null
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/service/varnish/configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "chart.selectors" $ | nindent 8 }}
        app.kubernetes.io/component: varnish
        app.service: {{ $.Release.Name }}-varnish
    spec:
      {{- with (pick . "affinity") }}
      {{- . | toYaml | nindent 6 }}
      {{- end }}
      containers:
      - name: varnish
        image: {{ .image | quote }}
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: {{ .resources.memory }}
          requests:
            memory: {{ .resources.memory }}
        readinessProbe:
          tcpSocket:
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: varnish-configuration
          mountPath: /etc/varnish/
        - name: varnish-cache
          mountPath: /var/lib/varnish
      restartPolicy: Always
      topologySpreadConstraints: {{- (include "pod.topologySpreadConstraints" (dict "root" $ "serviceName" "varnish" "service" .)) | nindent 8 }}
      volumes:
      - name: varnish-configuration
        configMap:
          name: {{ $.Release.Name }}-varnish-configuration
      - name: varnish-cache
        emptyDir:
          medium: Memory
{{- end }}
{{- end }}
