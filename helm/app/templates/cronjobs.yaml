{{- range $serviceName := (.Values.services | keys) -}}
{{- $service := include "service.resolved" (dict "root" $ "service_name" $serviceName) | fromYaml -}}
{{- if and (not (hasPrefix "_" $serviceName)) $service.cronjobs -}}
{{- range $cronName, $cronConfig := $service.cronjobs }}
{{- with (mergeOverwrite (deepCopy $service) (deepCopy $cronConfig)) }}
---
{{- if semverCompare ">=1.21-0" $.Capabilities.KubeVersion.Version }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ print $.Release.Name "-" $cronName }}
  {{- $cronMeta := pick $cronConfig "annotations" -}}
  {{- if $cronMeta }}
  {{- toYaml $cronMeta | nindent 2 }}
  {{- end }}
  labels:
    {{- include "chart.labels" $ | nindent 4 }}
    app.kubernetes.io/component: {{ $cronName }}
spec:
  {{- pick $cronConfig "concurrencyPolicy" "failedJobsHistoryLimit" "schedule" "startingDeadlineSeconds" "successfulJobsHistoryLimit" "suspend" | toYaml | nindent 2 }}
  jobTemplate:
    metadata:
      labels:
        {{- include "chart.labels" $ | nindent 8 }}
        app.kubernetes.io/component: {{ $cronName }}
    spec:
      {{- $jobSpec := pick $cronConfig "activeDeadlineSeconds" "backoffLimit" "ttlSecondsAfterFinished" }}
      {{- if $jobSpec }}
      {{- $jobSpec | toYaml | nindent 6 }}
      {{- end }}
      template:
        metadata:
          labels:
            {{- include "chart.labels" $ | nindent 12 }}
            app.kubernetes.io/component: {{ $cronName }}
        spec:
          {{- $podSpec := pick $service "affinity" "hostAliases" "securityContext" }}
          {{- if $podSpec }}
          {{- $podSpec | toYaml | nindent 6 }}
          {{- end }}
          restartPolicy: Never
          containers:
            - name: app
              {{- with .environment }}
              env:
              {{- range $key, $value := . }}
                - name: {{ $key | quote }}
                {{- if kindIs "string" $value }}
                  value: {{ tpl $value $ | quote }}
                {{- else if kindIs "map" $value }}
                  {{ tpl ($value | toYaml) $ | nindent 18 }}
                {{- else }}
                  value: {{ $value | quote }}
                {{- end }}
              {{- end }}
              {{- end }}
              {{- if or $service.environment_secrets .envFrom }}
              envFrom:
                {{- if $service.environment_secrets }}
                - secretRef:
                    name: {{ print $.Release.Name "-" $serviceName }}
                {{- end }}
                {{- with .envFrom }}
                {{- tpl (. | toYaml) $ | nindent 16 }}
                {{- end }}
              {{- end }}
              image: {{ .image | quote }}
              imagePullPolicy: Always
              {{- with (pick $cronConfig "command" "args") }}
              {{- . | toYaml | nindent 14 }}
              {{- end }}
              resources:
                limits:
                  memory: {{ .resources.memory }}
                requests:
                  memory: {{ .resources.memory }}
              {{- with .volumes }}
              volumeMounts:
                {{- range . }}
                - {{ tpl (toYaml (pick . "name" "mountPath" "readOnly")) $ | nindent 16 }}
                {{- end }}
              {{- end }}
          enableServiceLinks: false
{{- if $.Values.docker.image_pull_config }}
          imagePullSecrets:
          - name: {{ $.Release.Name }}-image-pull-config
{{- end }}
          {{- if $service.serviceAccountName }}
          serviceAccountName: {{ tpl $service.serviceAccountName $ | quote }}
          {{- end }}
          {{- with .volumes }}
          topologySpreadConstraints: {{- (include "pod.topologySpreadConstraints" (dict "root" $ "serviceName" $cronName "service" .)) | nindent 12 }}
          volumes:
            {{- range . }}
            - {{ tpl (toYaml (omit . "mountPath" "readOnly")) $ | nindent 12 }}
            {{- end }}
          {{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
