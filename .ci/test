#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
set -o xtrace

export path_test=".ci/tmp-test"

export TEST_MODE="${TEST_MODE:-full}"
export REUSE_EXISTING_WORKSPACE="${REUSE_EXISTING_WORKSPACE:-no}"
export TEARDOWN_ENVIRONMENT="${TEARDOWN_ENVIRONMENT:-yes}"

function main()
{
    local mode="$1"
    local sync="${2:-}"

    local sync_path=""
    if [[ -n "$sync" ]]; then
      sync_path="-${sync}"
    fi
    export path_test=".ci/tmp-test-${mode}${sync_path}"

    if [[ "$TEARDOWN_ENVIRONMENT" == "yes" ]]; then
      trap 'clean' EXIT
    fi

    if [[ "$mode" == "static" ]]; then
      export MY127WS_ENV=pipeline
    fi

    if [[ "$REUSE_EXISTING_WORKSPACE" != "yes" ]]; then
      # Test default mode of static or dynamic harnesses
      # For dynamic this means a mountpoint for the application code
      # or mutagen
      setup "$mode"
      if [[ "$sync" == "" ]]; then
        setup_dynamic_mountpoint
      elif [[ "$sync" == "mutagen" ]]; then
        setup_dynamic_mutagen
      fi
      prepare_environment
    fi

    if [[ "$TEST_MODE" == "quality" || "$TEST_MODE" == "full" ]]; then
      test_harness_quality "$mode" "$sync"
    fi
    if [[ "$TEST_MODE" == "acceptance" || "$TEST_MODE" == "full"  ]]; then
      test_harness_acceptance "$mode" "$sync"
    fi
    if [[ "$TEARDOWN_ENVIRONMENT" == "yes" ]]; then
      teardown
    fi
}

function test_harness_quality()
{
    .ci/quality "${path_test}/.my127ws"
}

function test_harness_acceptance()
(
    local mode="$1"
    local sync="$2"

    prepare_environment
    if (cd "${path_test}" && docker compose config --services) | grep -Fxe console; then
      install_console
      run_project_quality_tests
      install_environment
    else
      install_environment
      run_project_quality_tests
    fi
    check_environment_started "$mode"
    run_project_acceptance_tests
    restart_environment
    check_environment_started "$mode"
)

function setup()
(
    local mode="$1"

    if [ -d "${path_test}" ]; then
        rm -rf "${path_test}"
    fi

    cp -ap ".ci/sample-${mode}" "${path_test}"
    rsync --archive --exclude="**/.git" --exclude="**/.ci" ./ "${path_test}/.my127ws/"
)

function prepare_environment()
(
    cd "${path_test}"
    ws harness prepare
)

function install_console()
(
    cd "${path_test}"
    ws enable console
)

function install_environment()
(
    cd "${path_test}"
    ws install
)

function check_environment_started()
(
    local mode="$1"

    cd "${path_test}"

    if [ "$(docker compose ps --all | grep -v "lighthouse" | grep -c Exit)" -gt 0 ]; then
      echo 'Some containers failed to start'
      docker compose ps --all
      return 1
    fi
)

function run_project_quality_tests()
(
    cd "${path_test}"

    ws helm kubeval --cleanup app
)

function run_project_acceptance_tests()
(
    cd "${path_test}"
)

function restart_environment()
(
    cd "${path_test}"
    ws disable
    ws enable
)

function setup_dynamic_mountpoint()
(
    cd "${path_test}"
    echo "attribute('host.os'): linux" > workspace.override.yml
)

function setup_dynamic_mutagen()
(
    cd "${path_test}"
    echo "attribute('host.os'): darwin" > workspace.override.yml
    echo "attribute('mutagen'): yes" >> workspace.override.yml
)

function teardown()
(
    cd "${path_test}"
    ws destroy || (docker ps -a && return 1)
    rm -rf .my127ws
)

function clean()
{
    if [ -d "${path_test}/.my127ws" ]; then
        (cd "$path_test" && ws destroy) || (docker ps -a && return 1)
    fi

    if [ -d "$path_test" ]; then
        rm -rf "$path_test"
    fi
}

main "$@"
