{% set blocks  = 'application/overlay/_twig/Jenkinsfile/' %}
def failureMessages = []
pipeline {
    agent { label 'linux-amd64' }
    environment {
        COMPOSE_DOCKER_CLI_BUILD = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        DOCKER_BUILDKIT = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        {% if @('jenkins.credentials.my127ws_key') %}
        MY127WS_KEY = credentials('{{ @('jenkins.credentials.my127ws_key') }}')
        {% endif %}
        MY127WS_ENV = "pipeline"
    }
    triggers { cron(env.BRANCH_NAME == '{{ @('git.default_branch') }}' ? 'H H(2-6) * * 1' : '') }
    stages {
{% include blocks ~ 'stages.twig' %}
    }
    post {
{% if @('jenkins.notifications.slack.channel') and @('jenkins.notifications.slack.token_credential_id') %}
        failure {
            script {
                def message = "{% if @('jenkins.notifications.global.full_build_name') %}${env.JOB_NAME}{% else %}${env.JOB_BASE_NAME}{% endif %} #${env.BUILD_NUMBER} - Failure after ${currentBuild.durationString.minus(' and counting')} (<${env.RUN_DISPLAY_URL}|View Build>)"
                def fallbackMessages = [ message ]
                def fields = []

{% if @('jenkins.notifications.global.branch_link_template') and @('jenkins.notifications.global.commit_link_template') %}
                def shortCommitHash = "${GIT_COMMIT}".substring(0, 7)
                def commitLink = "commit <{{ @('jenkins.notifications.global.commit_link_template') }}".replace('GIT_COMMIT', GIT_COMMIT) + "|${shortCommitHash}>"
                def gitMessage = "Branch <{{ @('jenkins.notifications.global.branch_link_template') }}".replace('GIT_BRANCH', GIT_BRANCH) + "|${GIT_BRANCH}> at ${commitLink}"

                if (env.CHANGE_URL) {
                    // Jenkins builds pull requests by merging the pull request branch into the pull request's target branch,
                    // so we build on commits that do not technically exist and can't link to them.
                    gitMessage = "<${env.CHANGE_URL}|{{ @('jenkins.notifications.global.change_request_name') }} #${env.CHANGE_ID}> ${env.CHANGE_TITLE}{% if @('jenkins.notifications.global.change_request_build_on_merge') %} - merged into target branch " + "<{{ @('jenkins.notifications.global.branch_link_template') }}".replace('GIT_BRANCH', CHANGE_TARGET) + "|${CHANGE_TARGET}>{% endif %}"
                }
                fields << [
                    title: 'Source',
                    value: gitMessage,
                    short: false
                ]
                fallbackMessages << gitMessage
{% endif %}

                def failureMessage = failureMessages.join("\n")
                if (failureMessage) {
                    fields << [
                        title: 'Reason(s)',
                        value: failureMessage,
                        short: false
                    ]
                    fallbackMessages << failureMessage
                }
                def attachments = [
                    [
                        text: message,
                        fallback: fallbackMessages.join("\n"),
                        color: 'danger',
                        fields: fields
                    ]
                ]

                slackSend (channel: '{{ @('jenkins.notifications.slack.channel') }}', color: 'danger', attachments: attachments, tokenCredentialId: '{{ @('jenkins.notifications.slack.token_credential_id') }}')
            }
        }
{% endif %}
        always {
            sh 'ws destroy'
            cleanWs()
        }
    }
}
