
command('enable'):
  env:
    USE_MUTAGEN:          = boolToString(@('host.os') == 'darwin' and @('mutagen'))
    APP_BUILD:            = @('app.build')
    APP_MODE:             = @('app.mode')
    NAMESPACE:            = @('namespace')
    HAS_ASSETS:           = boolToString(@('aws.bucket') !== null and @('aws.bucket') !== '')
    CODE_OWNER: = @('app.code_owner')
    COMPOSE_BIN: = @('docker.compose.bin')
    COMPOSE_DOCKER_CLI_BUILD: = @('docker.buildkit.enabled') ? '1':'0'
    DOCKER_BUILDKIT:          = @('docker.buildkit.enabled') ? '1':'0'
  exec: |
    #!bash(workspace:/)
    set -- all
    source .my127ws/harness/scripts/enable.sh

command('version check'): |
    #!php
    if (!method_exists(my127\Workspace\Application::class, 'getVersion')) {
      echo "Workspace versions prior to 0.3.1 not supported by this harness version\n";
      echo "Please upgrade Workspace to continue\n";
      exit(1);
    }

command('enable console'):
  env:
    USE_MUTAGEN:          = boolToString(@('host.os') == 'darwin' and @('mutagen'))
    APP_BUILD:            = @('app.build')
    APP_MODE:             = @('app.mode')
    NAMESPACE:            = @('namespace')
    HAS_ASSETS:           = boolToString(@('aws.bucket') !== null and @('aws.bucket'))
    CODE_OWNER: = @('app.code_owner')
    COMPOSE_BIN: = @('docker.compose.bin')
    COMPOSE_DOCKER_CLI_BUILD: = @('docker.buildkit.enabled') ? '1':'0'
    DOCKER_BUILDKIT:          = @('docker.buildkit.enabled') ? '1':'0'
  exec: |
    #!bash(workspace:/)
    set -- console
    source .my127ws/harness/scripts/enable.sh

command('disable'):
  env:
    USE_MUTAGEN:          = boolToString(@('host.os') == 'darwin' and @('mutagen'))
    NAMESPACE:            = @('namespace')
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)
    source .my127ws/harness/scripts/disable.sh

command('destroy [--all]'):
  env:
    USE_MUTAGEN:          = boolToString(@('host.os') == 'darwin' and @('mutagen'))
    NAMESPACE:            = @('namespace')
    COMPOSE_BIN: = @('docker.compose.bin')
    DESTROY_ALL:          = boolToString(input.option('all'))
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/destroy.sh

command('rebuild'):
  env:
    USE_MUTAGEN:          = boolToString(@('host.os') == 'darwin' and @('mutagen'))
    NAMESPACE:            = @('namespace')
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)|@
    source .my127ws/harness/scripts/rebuild.sh

command('networks external'):
  env:
    NETWORKS: = get_docker_external_networks(@('docker.compose.bin'))
  exec: |
    #!bash(workspace:/)
    for NETWORK in ${NETWORKS}; do
      if ! docker network inspect "${NETWORK}" >/dev/null 2>&1; then
        passthru docker network create "${NETWORK}"
      fi
    done

command('exec %'):
  env:
    CODE_OWNER: = @('app.code_owner')
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)|=
    if [ -t 0 ] && [ -t 1 ] ; then
      $COMPOSE_BIN exec -u "${CODE_OWNER}" console ={ input.argument('%') }
    else
      $COMPOSE_BIN exec -T -u "${CODE_OWNER}" console ={ input.argument('%') }
    fi

command('logs %'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(harness:/)|=
    $COMPOSE_BIN logs ={input.argument('%')}

command('ps'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)|@
    $COMPOSE_BIN ps

command('console'):
  env:
    CODE_OWNER: = @('app.code_owner')
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)|@
    passthru $COMPOSE_BIN exec -u "${CODE_OWNER}" console bash

command('shell [-u=<user>|--user=<user>] <service>', 'shell'):
  description: Open a default shell on any running container
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    ARG_SERVICE: = input.argument('service')
    OPT_USER: "= input.option('user') ?: input.option('u')"
  exec: |
    #!bash(workspace:/)|=
    if ! SHELL=$($COMPOSE_BIN exec ${OPT_USER:+--user "$OPT_USER"} -T "$ARG_SERVICE" sh -c 'getent passwd $(whoami) | sed -E '\''s/^.*:([^:]+)$/\1/'\'''); then
      echo "User not found"
      exit 1
    fi
    passthru $COMPOSE_BIN exec ${OPT_USER:+--user "$OPT_USER"} "$ARG_SERVICE" "$SHELL"

command('db-console'): |
  #!bash
  ws db console

command('db console'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    DB_PLATFORM: = @('database.platform')
  exec: |
    #!bash(workspace:/)|@
    case "${DB_PLATFORM}" in
    mysql)
      passthru $COMPOSE_BIN exec console bash -c 'mysql --host "$DB_HOST" --user "$DB_USER" -p"$DB_PASS" "$DB_NAME"'  
      ;;
    postgres)
      passthru $COMPOSE_BIN exec console bash -c 'PGPASSWORD="$DB_PASS" psql --host="$DB_HOST" --username="$DB_USER" --dbname="$DB_NAME"'
      ;;
    *)
      echo "error: database.platform attribute value '${DB_PLATFORM}' not supported" >&2
      exit 1
      ;;
    esac

command('assets download'):
  env:
    AWS_ACCESS_KEY_ID: = @('aws.access_key_id')
    AWS_ID: = @('aws.access_key_id')
    AWS_KEY: = @('aws.secret_access_key')
    AWS_SECRET_ACCESS_KEY: = @('aws.secret_access_key')
  exec: |
    #!bash(workspace:/)|@
    passthru ws.aws s3 sync '@('assets.remote')' '@('assets.local')'

command('assets upload'):
  env:
    AWS_ACCESS_KEY_ID: = @('aws.access_key_id')
    AWS_ID: = @('aws.access_key_id')
    AWS_KEY: = @('aws.secret_access_key')
    AWS_SECRET_ACCESS_KEY: = @('aws.secret_access_key')
  exec: |
    #!bash(workspace:/)|@
    passthru ws.aws s3 sync '@('assets.local')' '@('assets.remote')'

command('port <service>'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
  exec: |
    #!bash(workspace:/)|=
    passthru docker port "$($COMPOSE_BIN ps -q ={input.argument('service')})"

command('unset <attribute>'):
  env:
    ATTR_KEY: = input.argument('attribute')
  exec: |
    #!bash(workspace:/)|=
    if [ ! -f workspace.override.yml ]; then
      touch workspace.override.yml
    fi
    if grep -q "^attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo "Removing old '${ATTR_KEY}' setting from workspace.override.yml"
      sed "/^attribute('${ATTR_KEY}'): .*$/d" workspace.override.yml > workspace.override.yml.tmp && mv workspace.override.yml.tmp workspace.override.yml
    fi
    if grep -q "^attribute('${ATTR_KEY}'):" workspace.override.yml; then
      echo 'Could not remove line from workspace.override.yml, failing'
      exit 1
    fi

command('set <attribute> <value>'):
  env:
    ATTR_KEY: = input.argument('attribute')
    ATTR_VAL: = input.argument('value')
  exec: |
    #!bash(workspace:/)|=
    passthru ws unset ${ATTR_KEY}
    if [ $(tail -c1 workspace.override.yml | wc -l) -eq 0 ]; then
      echo -e "\n" >> workspace.override.yml
    fi
    echo "Setting '${ATTR_KEY}' setting to '${ATTR_VAL}' in workspace.override.yml"
    echo "attribute('${ATTR_KEY}'): ${ATTR_VAL}" >> workspace.override.yml

command('db import <database_file>'):
  env:
    CODE_OWNER: = @('app.code_owner')
    COMPOSE_BIN: = @('docker.compose.bin')
    DATABASE_FILE: = input.argument('database_file')
  exec: |
    #!bash(workspace:/)|=
    passthru $COMPOSE_BIN exec -u "${CODE_OWNER}" console app database:import "$DATABASE_FILE"

command('harness update existing'):
  exec: |
    #!bash(workspace:/)|@
    ws disable
    rm -rf .my127ws
    ws install --step=download
    ws harness prepare
    touch .my127ws/.flag-built
    ws refresh
    ws harness post-update

command('harness post-update'):
  exec: |
    #!bash(workspace:/)
    ws exec app overlay:apply
    ws exec app migrate
    ws exec app welcome

command('harness update fresh'):
  exec: |
    #!bash(workspace:/)|@
    ws disable || true
    rm -rf .my127ws
    ws install

command('generate token <length>'):
  env:
    LENGTH: = input.argument('length')
  exec: |
    #!php
    $ascii_codes = range(48, 57) + range(97, 122) + range(65, 90);
    $codes_length = (count($ascii_codes)-1);
    shuffle($ascii_codes);
    $string = '';
    for($i = 1; $i <= $env['LENGTH']; $i++) {
        $previous_char = $char ?? '';
        $char = chr($ascii_codes[random_int(0, $codes_length)]);
        while($char == $previous_char){
            $char = chr($ascii_codes[random_int(0, $codes_length)]);
        }
        $string .= $char;
    }
    echo $string;

command('lighthouse [--with-results]'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    OUTPUT_RESULTS:       = boolToString(input.option('with-results'))
  exec: |
    #!bash(workspace:/)|@
    passthru $COMPOSE_BIN run -T --rm lighthouse bash -i /app/run.sh
