attributes.default:
  app:
    # build - static|dynamic
    #   dynamic - volumes are mounted and the build step is run once the containers have started
    #   static  - app is copied into console, built, then the resulting build is copied into the web image
    build: dynamic

    # mode - development|production
    #   development - additional tooling is made available and application is run in development mode
    #   production  - leaner images with less tooling and application is run in production mode
    mode: development

    # The user/group to use for code
    code_owner: build
    code_owner_group: = @('app.code_owner')
    code_owner_home: "= '/home/' ~ @('app.code_owner')"

    services: []

  task:
    build:
      when: 'true'
      steps: []

  delegated-volumes: false
  mutagen: true

  jenkins:
    credentials:
      my127ws_key: = @('workspace.name') ~ '-my127ws-key'
    docker:
      buildkit:
        enabled: true
    tests:
      isolated: = @('services.console.enabled')
      use_global_services: false

  pipeline:
    base:
      persistence: = @('persistence')
      hostname:  = @('pipeline.preview.hostname')
    publish:
      enabled: false
      services: = publishable_services(@('services'))
      # branches that should publish (other than change requests and qa)
      # use ANT glob syntax to match multiple branches
      branches:
        - = @('git.default_branch')
      # For defining environment variables in Jenkins
      environment: {}
      # when enabled the application helm chart will be published
      # to the given git repository.
      chart:
        enabled: false
        git:
          # A SSH Username with private key Jenkins credential id.
          # Preferred over ssh_private_key to store credentials local development doesn't need
          ssh_credential_id: ~
          # private key with write access to the repository
          ssh_private_key: = @('pipeline.publish.chart.git.key')
          # eg. git@github.com:organisation/project.git
          repository: ~
          # path within the repository to place the chart, no leading or trailing slashes
          # note: an additional directory with the branch name will be created
          path: = 'build-artifacts/' ~ @('workspace.name')
          # sets the git user.name and user.email before pushing the commit
          user_name: Jenkins
          email: name@example.com
    preview:
      enabled: false
      target_branches:
        - = @('git.default_branch')
      environment: {}
      cluster:
        name: null
      namespace: = @('workspace.name') ~ '-' ~ slugify(branch())
      hostname:  = @('pipeline.preview.namespace') ~ '.example.com'
      rabbitmq:
        external_host: = 'rabbitmq-' ~ @('pipeline.preview.hostname')
      smtp:
        host: mailhog.mailhog.svc.cluster.local
        port: = @('smtp.port')
      persistence:
        redis-session:
          enabled: false
    qa:
      enabled: false
      environment: {}
      branch: develop
      cluster:
        name: null
      namespace: = @('workspace.name') ~ '-' ~ 'qa'
      hostname: = @('pipeline.qa.namespace') ~ '.example.com'
      persistence: ~
      rabbitmq:
        external_host: = 'rabbitmq-' ~ @('pipeline.qa.hostname')
      smtp:
        host: mailhog.mailhog.svc.cluster.local
        port: = @('smtp.port')

  docker:
    registry:
      url: = get_docker_registry(@('docker.repository'))
      # A Username with Password Jenkins credential id
      # Preferred over .username/.password to store credentials local development doesn't need
      credential_id: ~
      username: "= env('DOCKER_REGISTRY_CREDS_USR') ?: null"
      password: "= env('DOCKER_REGISTRY_CREDS_PSW') ?: null"
    repository: = @("workspace.name")
    buildkit:
      enabled: true
    compose:
      bin: 'docker-compose'
      host_volume_options: "= ':' ~ (@('delegated-volumes') ? 'delegated' : 'cached')"
    # If using gitops helm chart repositories, it's recommended to put this configuration
    # in the values.yml in there now instead of project application repositories
    image_pull_config: = @('docker.config')
    port_forward:
      enabled: "= @('app.build') == 'dynamic'"
    pull: "= env('CI', 'local') || env('JOB_ID', 'local') ? 'missing' : 'always'" 

  backend:
    path: /app
    build:
      steps: []
    install:
      steps: []
    init:
      steps: []
    migrate:
      steps: []
    cron:
      jobs: []

  framework:
    readme_blocks: []

  frontend:
    path: /app
    watch: npm run watch
    build:
      when: false
      steps: []

  git:
    default_branch: develop

  lighthouse:
    target:
      url: = 'https://' ~ @('hostname')
    success-thresholds:
      pwa:
        enabled: false
        score: 0
      seo:
        enabled: false
        score: 0
      best-practices:
        enabled: false
        score: 0
      accessibility:
        enabled: false
        score: 0
      performance:
        enabled: false
        score: 0

  assets:
    remote: ="s3://"~@("aws.bucket")~"/development"
    local: tools/assets/development

  database:
    # possible platforms are mysql, postgres or ~ for none
    platform: mysql
    platform_version: >
      = @('database.platform') == 'mysql' ? '8.0'
      : @('database.platform') == 'postgres' ? '9.6'
      : null
    host: mysql
    port: 3306
    user: app
    pass: app
    name: app
    root_pass: DV6RdNY3QcFsBk7V
    port_forward: ~
    import:
      steps: []

  elasticsearch:
    host: elasticsearch
    image: elasticsearch
    port: 9200
    tag: 7.16.3

  domain: my127.site
  hostname: = @('namespace') ~ '.' ~ @('domain')
  hostname_aliases: []

  helm:
    additional_schema_locations: https://inviqa.github.io/kubernetes-json-schema/schema
    # currently limited to versions supplied by https://github.com/inviqa/kubernetes-json-schema/tree/master/docs/schema
    kubernetes_version: 1.21.9
    timeout: 300

    sealed_secrets:
      # location of the sealed-secret service to download the active certificate from
      controller_name: sealed-secrets
      controller_namespace: sealed-secrets
      # Use local file (or fetch from http url) as the certificate
      # If null, it will be fetched from the controller in the current kubectl context
      certificate_file: ~
      # A namespace the secret should be only decryptable by
      # Ignored if scope is cluster-wide.
      # If null, it will be fetched from the current kubectl context
      namespace: ~
      # The scope under which a secret can be decrypted
      # Either cluster-wide, namespace-wide, or strict
      scope: "= @('helm.sealed_secrets.namespace') ? 'namespace-wide' : 'cluster-wide'"

  mysql:
    image: mysql
    # arm64 support is currently in a different tag
    tag: "= host_architecture() == 'amd64' ? '8.0' : '8.0-oracle'"

  rabbitmq:
    image: rabbitmq
    tag: 3.8-management-alpine
    api_port: 15672
    erlang_cookie: TeTTiwT9y548yIcfw4peaOrqgtLItD6B
    external_host: = 'rabbitmq-' ~ @('hostname')
    host: rabbitmq
    port: 5672
    user: rabbitmq
    password: rabbitmq
    vhosts:
      default: '/'

  redis:
    host: redis
    port: 6379

  redis-session:
    host: redis-session
    port: 6379

  smtp:
    host: 'mailhog-relay'
    port: 1025

  varnish:
    response:
      s-maxage: ~
    target_service: nginx

  persistence:
    enabled: false
    mountVolumesOnConsole: true # possible to disable, but may lead to unexpected concequences with app init/migrate

    elasticsearch:
      enabled: true
      claimName: "{{ $.Release.Name }}-elasticsearch-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 2Gi
    mongodb:
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Gi
    mysql:
      enabled: true
      claimName: "{{ $.Release.Name }}-mysql-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 4Gi
    rabbitmq:
      enabled: true
      claimName: "{{ $.Release.Name }}-rabbitmq-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 2Gi
    postgres:
      enabled: true
      claimName: "{{ $.Release.Name }}-postgres-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 4Gi
    redis:
      enabled: false
      claimName: "{{ $.Release.Name }}-redis-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 2Gi
    redis-session:
      enabled: true
      claimName: "{{ $.Release.Name }}-redis-session-pv-claim" # legacy naming
      accessMode: ReadWriteOnce
      size: 2Gi
    solr-data:
      enabled: true
      accessMode: ReadWriteOnce
      size: 1Gi

  tls:
    key: |
      -----BEGIN PRIVATE KEY-----
      MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQC9q3EMGDtDNKAt
      CHyM1MfWUaIGsv5Zka7pfjIOKL/KvrSIVpZyyJ3lSALeRyyDDRZeYwkbkNdDJgir
      FmD0vJkYifYWfGdIJmbjdm62LGyzDf79Ve8aQF0lLcedMhoCfu7+qciIYnjHdvkx
      Y6Fo9CTZP7m+oSNmUjHdJD3scX4l3vodBK67Hpk+W2eEhwAxG5aFsspDnPi4L9ha
      KlMps+eSn1hLLGYrmthtP2assckvdyL10hS7+OOZFmj5vxGNbQn2F4whiu06JmXL
      oO8T9yd8XNN383FjREYKjrQcyJo3izvawEgrRi9mNKM9DhWuBdbYNe/cSgGfwBK6
      Kc9e8zCLAgMBAAECggEAVL6fOgoxoGuJDdX24G3KBCZhQKEFKDwBbO4nq0/lsc7X
      lvspKYwdkG5Gac5fQwa78dxKG3jx1VzPDrJnC7KgrOgnfhCDjScrXYJzIQ5kWvRr
      9AFLXe1YMN5ti/zwxiC05DA0G0v0LxsnaDvdyKkdNbxVX6lbycH76ZTh3h0vgfeD
      Wc8MMlRTa+ORWKoIZsm+qnNLhWQhhbmoA8LNkZqtJIOBZuyAu8vyXzrEFIhKqVzU
      Jdz0S+xtgYUkoXCTgdYiqoFjlKhaIIV2Fc0vbc68ziIiu3ZtaVch7wNyftoXyjBr
      hjI1GT1dr7NsQpPZ6xtqjGhIvUuVSeCSBZeeXkymAQKBgQDsxFb916gIxl3QQYPV
      NiKPi3rZD5iuMTjy0937dhHWGGYlWW2GEE0XjWrmLUnGyLuxwA5kFgS0eMubbhTg
      aeewHamHeN/pcJIF6HndJbqXLB148E8ux6grpQrHKpTb2RLOPkd6bAgn1SjPllCL
      a/vVanevaJs8U27sKEfGND0aCwKBgQDNE7IzvD1JAUrzqzG9Lxg+NhaHQTQfW45W
      cuHvESiyhc93kdufvcCTrrRRXSZOqDN26+64Ni62O/ulduq4qZmhG/lxqSz5mnpr
      2oV2Kg1C1EUC4V2B9WQoMOhvOa0esTVSm9hC4oX0kYIzl6HbVAUGe8JMXOoKTJkV
      3sAz0FbTgQKBgQC1CX+2wvIiG4NaHO4v1h/hAHajiDBnaQ2xZtzCTMpgmPFpt5Ju
      QwKfcqt9ar2RuKUDyeV3E/ru/7o3k5l06qWUXWnmQz96oG+XAuZDeXjN5JZ4hc8V
      5uYo0R6HoYCHBdlCSA6hhf9Kbcuxxq65nIzH54uyXNrt6qHTAw22ePULdwKBgQCK
      vp+a1ukToldGQfV1zA330Pou6dNMv9Gt9S2cY5yII3W4rKrNCUDn6ZO/VGkdYDjp
      ZTft02KJEk3vpWOqKbxxvo5l8pImEPhwTbhruImeRCSojTaJPS9U7bnjvj68/CFa
      UWvf3IfKbkOLijQMQmzf9Q0AQwBolWgg3sJki7iigQKBgQCf82eve3W/s/pZzKGi
      WWACcZLmDTHeH2AU3ZDfFaEAKObe/cdHMgk8MGewf1IF6QDQXtaxHlM5/FKQ1ohu
      uoe7Xo1R+KlrVRxKAlNQ5lfzhAAgDNaOhpgkH4cehfPrIIh9rwNMSkHDRS0DELvY
      DPyRumPy7zTg5YPzzl7tM1/OPA==
      -----END PRIVATE KEY-----

    crt: |
      -----BEGIN CERTIFICATE-----
      MIIC6zCCAdOgAwIBAgIJAI4syJyPEWAMMA0GCSqGSIb3DQEBBQUAMAwxCjAIBgNV
      BAMMASowHhcNMTgwNzI0MTE1MjQ0WhcNMTkwNzI0MTE1MjQ0WjAMMQowCAYDVQQD
      DAEqMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvatxDBg7QzSgLQh8
      jNTH1lGiBrL+WZGu6X4yDii/yr60iFaWcsid5UgC3kcsgw0WXmMJG5DXQyYIqxZg
      9LyZGIn2FnxnSCZm43Zutixssw3+/VXvGkBdJS3HnTIaAn7u/qnIiGJ4x3b5MWOh
      aPQk2T+5vqEjZlIx3SQ97HF+Jd76HQSuux6ZPltnhIcAMRuWhbLKQ5z4uC/YWipT
      KbPnkp9YSyxmK5rYbT9mrLHJL3ci9dIUu/jjmRZo+b8RjW0J9heMIYrtOiZly6Dv
      E/cnfFzTd/NxY0RGCo60HMiaN4s72sBIK0YvZjSjPQ4VrgXW2DXv3EoBn8ASuinP
      XvMwiwIDAQABo1AwTjAdBgNVHQ4EFgQUK4SXDSeyVYbCWr31rz2K6GLRFoYwHwYD
      VR0jBBgwFoAUK4SXDSeyVYbCWr31rz2K6GLRFoYwDAYDVR0TBAUwAwEB/zANBgkq
      hkiG9w0BAQUFAAOCAQEAjz2PUbdi2S+h4UB3P2UBLdgDClkiSPF+gAqfw4D82faf
      M8hpMuCcd3148dejU4tFPUdLx1MASK8ucCk7rcwVtafWPYU4nMDlmZ9Zj9F2Y8KY
      dVfHfTIOblTSYc90g+nTFsTchkEFOH0nRZAKhCT3HphXNTZFNIQWoqe63SJZ8LTs
      8RBO/zcoh5E31+Rm0WxKlYH4QElLp9dXAtKueWGTafh2E8Re96IS+Uig+yC3RIYJ
      MWLcATwR3lSnqN2ifByic5VGWbRKkGNsh3wAWlejL2FGv8mLU1q8nLK36UcU/HzZ
      ziLtpidJOJHDpyDSAxDSxcP9fJ6gssMQln92DJ/SUQ==
      -----END CERTIFICATE-----
