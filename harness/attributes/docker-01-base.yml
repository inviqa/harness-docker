attributes.default:
  services:
    console:
      enabled: true
      build:
        from: debian:buster-slim
        environment: {}
      environment:
        HOST_OS_FAMILY: = @('host.os')
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-console'
      publish: true
      resources:
        memory: "1024Mi"
    elasticsearch:
      image: = @('elasticsearch.image') ~ ':' ~ @('elasticsearch.tag')
      environment:
        ES_JAVA_OPTS: -Xms512m -Xmx512m
        discovery.type: single-node
      resources:
        memory: "1024Mi"
    lighthouse:
      image: = 'quay.io/inviqa_images/lighthouse:' ~ @('services.lighthouse.tag')
      tag: "= host_architecture() == 'amd64' ? 'chrome' : 'chromium'"
    memcached:
      image: memcached:1-alpine
    mongodb:
      image: mongo:4.4
      environment:
        MONGO_INITDB_ROOT_USERNAME: admin
      environment_secrets:
        MONGO_INITDB_ROOT_PASSWORD: password
      resources:
        memory: "512Mi"
    mysql:
      image: = @('mysql.image') ~ ':' ~ @('mysql.tag')
      config:
        options:
          default_authentication_plugin: "= (@('database.platform') == 'mysql' && @('database.platform_version') >= 8.0 && @('database.platform_version') < 10.0 ? 'mysql_native_password' : '')"
          ignore-db-dir: "= (@('database.platform') == 'mysql' && @('database.platform_version') < 8.0 ? 'lost+found' : '')"
          max_allowed_packet: 4M
      environment:
        MYSQL_DATABASE: = @('database.name')
        MYSQL_USER: = @('database.user')
      environment_secrets:
        MYSQL_PASSWORD: = @('database.pass')
        MYSQL_ROOT_PASSWORD: = @('database.root_pass')
      resources:
        memory: "512Mi"
    opensearch:
      image: = @('services.opensearch.repository') ~ ':' ~ @('services.opensearch.tag')
      repository: opensearchproject/opensearch
      tag: '2.9.0'
      environment:
        OPENSEARCH_JAVA_OPTS: -Xms512m -Xmx512m
        discovery.type: single-node
      resources:
        memory: "1024Mi"
    postgres:
      image: postgres:9.6
      environment:
        POSTGRES_DB: = @('database.name')
        POSTGRES_USER: = @('database.user')
        PGDATA: /var/lib/postgresql/data/pgdata
      environment_secrets:
        POSTGRES_PASSWORD: = @('database.pass')
      resources:
        memory: "512Mi"
    rabbitmq:
      image: = @('rabbitmq.image') ~ ':' ~ @('rabbitmq.tag')
      environment:
        RABBITMQ_DEFAULT_USER: = @('rabbitmq.user')
        RABBITMQ_DEFAULT_VHOST: = @('rabbitmq.vhosts.default')
      environment_secrets:
        RABBITMQ_DEFAULT_PASS: = @('rabbitmq.password')
        RABBITMQ_ERLANG_COOKIE: = @('rabbitmq.erlang_cookie')
      resources:
        memory: "1024Mi"
    redis:
      image: redis:7-alpine
      config:
        options:
          # Handle many smaller keys
          activedefrag: 'yes'
          # 170Mi - 170*1024*1024 bytes
          maxmemory: '178257920'
          # Evict any least recently used key even if they don't have a TTL
          maxmemory-policy: allkeys-lru
          # Save snapshots every X changes have happened within Y seconds (these are the defaults in redis.conf)
          # Redis < 7
          # save:
          #   - ['3600', '1']
          #   - ['300', '100']
          #   - ['60', '10000']
          # Redis >= 7
          # save:
          #   - ['3600', '1', '300', '100', '60', '10000']
      resources:
        # 1.5 * maxmemory to allow copy on write snapshots
        memory: "256Mi"
    redis-session:
      image: redis:7-alpine
      config:
        options:
          # Handle many smaller keys
          activedefrag: 'yes'
          # 170Mi - 170*1024*1024 bytes
          maxmemory: '178257920'
          # Evict key that would expire soonest
          maxmemory-policy: volatile-ttl
          # Save snapshots every X changes have happened within Y seconds (these are the defaults in redis.conf)
          # Redis < 7
          # save:
          #   - ['3600', '1']
          #   - ['300', '100']
          #   - ['60', '10000']
          # Redis >= 7
          # save:
          #   - ['3600', '1', '300', '100', '60', '10000']
      resources:
        # 1.5 * maxmemory to allow copy on write snapshots
        memory: "256Mi"
    relay:
      enabled: true
      publish: false
    solr:
      publish: "= @('services.solr.enabled')"
      build:
        image: "= @('services.solr.major_version') != 4 ? 'solr:' ~ @('services.solr.major_version') ~ '-slim' : 'quay.io/inviqa_images/solr4:latest'"
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-solr'
      config_path: ""
      environment:
        SOLR_CORE_NAME: collection1
        SOLR_VOLUME_DIR: "=@('services.solr.major_version') == 4 ? '/opt/solr/example/solr' : (@('services.solr.major_version') < 8 ? '/opt/solr/server/solr/mycores' : '/var/solr')"
      environment_secrets: {}
      host: solr
      major_version: 8
      port: 8983
      resources:
        memory: "512Mi"
    varnish:
      # 6.0 is LTS
      image: varnish:6.0
      environment:
        VARNISH_SIZE: "1024M"
      resources:
        memory: "1124Mi"
  pipeline:
    base:
      global:
        topologySpreadConstraints: []
          # - topologyKey: topology.kubernetes.io/zone
          #   # defaults:
          #   # maxSkew: 1
          #   # whenUnsatisfiable: ScheduleAnyway
          # - topologyKey: kubernetes.io/hostname
          #   maxSkew: 2
          #   whenUnsatisfiable: DoNotSchedule
        prometheus:
          podMonitoring: false
        sealed_secrets:
          # Note: be very careful considering disabling this, as in most cases
          # it causes the secrets in it to be stored plaintext on filesystem
          # or in helm chart repositories
          # requires sealed-secrets k8s operator
          enabled: true
          scope: = @('helm.sealed_secrets.scope')
      configMaps: {}
      services:
        relay:
          enabled: false
    production:
      services: {}
    qa:
      services: {}
    preview:
      services: {}
